name: C1 Transformation API
on:
  push:
    branches:
      - master
  pull_request:

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: c1-transformation-service
  NPM_TOKEN: ${{secrets.NPM_PERSONAL_ACCESS_TOKEN}}

jobs:
  code-security-analysis:
    uses: KL-Global/kidsloop-reusable-workflows/.github/workflows/reusable-extended-sec-codeql.yml@main    
    with:
      language: 'node'

  docker-security-analysis:
    uses: KL-Global/kidsloop-reusable-workflows/.github/workflows/reusable-container-workflow.yml@main
    with:
      docker-path: ./Dockerfile

  lint:
    name: Run linters
    needs: [code-security-analysis, docker-security-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install Node.js dependencies
        run: NPM_TOKEN=$NPM_TOKEN npm ci
      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          eslint: true
          prettier: true

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          NPM_TOKEN=$NPM_TOKEN npm ci
          npm run test

  build:
    runs-on: ubuntu-latest
    needs: [docker-security-analysis, test]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get short git sha
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "main-${{ steps.vars.outputs.sha_short }}"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg NPM_TOKEN=$NPM_TOKEN .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
