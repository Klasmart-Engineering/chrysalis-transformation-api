openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'KidsLoop - C1 Transformation API'
  description: |
    This API is very light-weight and is used to validate and pass validated data to our generic backend for onboarding.

servers:
  - url: 'http://localhost:4200'
    description: 'Local development server'

paths:
  /onboard/organizations:
    post:
      summary: 'Attempts to onboard all organizations fetched from C1'
      operationId: organization
      tags:
        - Organizations
      requestBody:
        description: Optional list of organization names.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUsersToOrganization'
            example: { organizationNames: ['Organization 1', 'Organization 2'] }
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponseOrganization'
        '400':
          $ref: '#/components/responses/BadRequestOrganization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /onboard/organizations/:organizationId/schools:
    post:
      summary: 'Attempts to onboard all schools for a given organization uuid or partialy onboard schools for the schoolIds found in the body of the request'
      operationId: school
      tags:
        - Schools
      requestBody:
        description: Optional list of school ids to partialy onboard schools.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUsersToOrganization'
            example:
              {
                schoolIds:
                  [
                    'c8a34249-0ed9-42c7-80f1-324b33dc8a68',
                    '7fe716b9-74f5-47b3-ba57-7e31170a6226',
                  ],
              }
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponseSchool'
        '400':
          $ref: '#/components/responses/BadRequestSchool'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /onboard/schools/:schoolId/classes:
    post:
      summary: 'Attempts to onboard all classes for a given school uuid or partialy onboard classes for the classIds found in the body of the request'
      operationId: class
      tags:
        - Classes
      requestBody:
        description: Optional list of class ids to partialy onboard classes.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUsersToOrganization'
            example:
              {
                classIds:
                  [
                    'c8a34249-0ed9-42c7-80f1-324b33dc8a68',
                    '7fe716b9-74f5-47b3-ba57-7e31170a6226',
                  ],
              }

      responses:
        '200':
          $ref: '#/components/responses/SuccessResponseClass'
        '400':
          $ref: '#/components/responses/BadRequestClass'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /onboard/schools/:schoolId/users:
    post:
      summary: 'Attempts to onboard all users for a given school uuid or partialy onboard users for the userIds found in the body of the request'
      operationId: user
      tags:
        - Users
      requestBody:
        description: Optional list of user ids to partialy onboard users.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUsersToOrganization'
            example:
              {
                userIds:
                  [
                    'c8a34249-0ed9-42c7-80f1-324b33dc8a68',
                    '7fe716b9-74f5-47b3-ba57-7e31170a6226',
                  ],
              }
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /link/users-to-organization:
    post:
      summary: 'Attempts to link all users to an organization'
      operationId: linkUsersToOrganization
      tags:
        - Link entities
      requestBody:
        description: A list of user ids with its role ids to link to an organization
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUsersToOrganization'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestLinkUsersToOrganization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /link/entities:
    post:
      summary: 'Attempts to link schools, classes, programs or roles to their equivalent entity'
      operationId: linkEntities
      tags:
        - Link entities
      requestBody:
        description: A list of entities for which to apply the links
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkEntities'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestLinkEntities'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/UnexpectedError'

components:
  responses:
    SuccessResponse:
      description: 'The response when onbording of the "entity" succeeded'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    SuccessResponseOrganization:
      description: 'OK'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            retriable:
              - msg: 'Failed to establish a connection with the client API.'
                type: 'client_error'
                endpoint: '/onboard/organizations'
                params:
                  { organizationNames: ['Organization 1', 'Organization 2'] }
              - msg: 'Could not find organization with name "Organization 1".'
                type: 'not_found_error'
                endpoint: '/onboard/organizations'
                params:
                  { organizationNames: ['Organization 1', 'Organization 2'] }
            failed:
              - msg: '"OrganizationUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: organization
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"OrganizationName" is not allowed to be empty'
                value: ''
                param: name
                entity: organization
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    SuccessResponseSchool:
      description: 'OK'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            retriable:
              - msg: 'Could not find schools with uuids: ["c8a34249-0ed9-42c7-80f1-324b33dc8a68","7fe716b9-74f5-47b3-ba57-7e31170a6226"].'
                type: 'not_found_error'
                endpoint: '/onboard/organizations/db43cdef-104c-4a5a-b48b-036554c3aa06/schools'
                params:
                  {
                    schoolIds:
                      [
                        'c8a34249-0ed9-42c7-80f1-324b33dc8a68',
                        '7fe716b9-74f5-47b3-ba57-7e31170a6226',
                      ],
                  }
            failed:
              - msg: '"SchoolUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: school
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"SchoolName" is not allowed to be empty'
                value: ''
                param: name
                entity: school
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    SuccessResponseClass:
      description: 'OK'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            retriable:
              - msg: 'Could not find classes with uuids: ["c8a34249-0ed9-42c7-80f1-324b33dc8a68","7fe716b9-74f5-47b3-ba57-7e31170a6226"].'
                type: 'not_found_error'
                endpoint: '/onboard/schools/72cc16c5-2c0b-493f-b544-04a5d2d48ecf/classes'
                params:
                  {
                    classIds:
                      [
                        'c8a34249-0ed9-42c7-80f1-324b33dc8a68',
                        '7fe716b9-74f5-47b3-ba57-7e31170a6226',
                      ],
                  }
            failed:
              - msg: '"ClassUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: class
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"ClassName" is not allowed to be empty'
                value: ''
                param: name
                entity: class
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'

    BadRequestOrganization:
      description: 'Bad Request. Validation issues with organization schema.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: '"OrganizationUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: organization
                uuid: 'db43cdef-104c-4a5a-b48b-036554c3aa06'
              - msg: '"OrganizationName" is not allowed to be empty'
                value: ''
                param: name
                entity: organization
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    BadRequestSchool:
      description: 'Bad Request. Validation issues with school schema.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: '"SchoolUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: school
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"SchoolName" is not allowed to be empty'
                value: ''
                param: name
                entity: school
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    BadRequestClass:
      description: 'Bad Request. Validation issues with class schema.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: '"ClassUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: class
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"ClassName" is not allowed to be empty'
                value: ''
                param: name
                entity: class
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    BadRequestUser:
      description: 'Bad Request. Validation issues with user schema.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: '"UserUUID" must be an UUID v4'
                value: 'cdc9a77f-ac83-'
                param: externalUuid
                entity: user
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"UserGivenName" is not allowed to be empty'
                value: ''
                param: userGivenName
                entity: user
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"UserFamilyName" is not allowed to be empty'
                value: ''
                param: userFamilyName
                entity: user
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: '"Gender" is not allowed to be empty'
                value: ''
                param: gender
                entity: user
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    BadRequestLinkUsersToOrganization:
      description: 'Bad Request. Validation issues with linking entities.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: 'User does not exit for "userId"'
                value: '9f2c90e5-a21f-4622-979a-c3b37afe2186'
                param: userId
                entity: linkUsersToOrganization
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: 'Role does not exist for "roleId"'
                value: 'dbd83f2e-ec21-403e-9412-ad7aded32876'
                param: roleId
                entity: linkUsersToOrganization
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
    BadRequestLinkEntities:
      description: 'Bad Request. Validation issues with linking entities.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
          example:
            errors:
              - msg: 'Target entity does not exit for "organizationId"'
                value: '0d8aa4ae-e17c-42b1-87dc-be582003a0ba'
                param: targetData.organizationId
                entity: linkEntities
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: 'Source entity does not exit for "entityId"'
                value: '9f2c90e5-a21f-4622-979a-c3b37afe2186'
                param: sourceData[1].userId
                entity: linkEntities
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'
              - msg: 'Source entity does not exist for "roleId"'
                value: 'dbd83f2e-ec21-403e-9412-ad7aded32876'
                param: sourceData[1].roleId
                entity: linkEntities
                uuid: '72cc16c5-2c0b-493f-b544-04a5d2d48ecf'

    Unauthorized:
      description: 'Unauthorized request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Unauthorized
    UnexpectedError:
      description: 'Internal server error.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal Server Error

  schemas:
    LinkUsersToOrganization:
      type: object
      required:
        - organizationId
        - data
      properties:
        targetData:
          type: object
          required:
            - organizationId
          properties:
            organizationId:
              type: string
        sourceData:
          type: object
          required:
            - userId
            - roleId
          properties:
            userId:
              type: string
            roleId:
              type: string
      example:
        targetData: { organizationId: '0d8aa4ae-e17c-42b1-87dc-be582003a0ba' }
        sourceData:
          [
            {
              userId: '9f2c90e5-a21f-4622-979a-c3b37afe2186',
              roleId: 'dbd83f2e-ec21-403e-9412-ad7aded32876',
            },
            {
              userId: '974e6768-cfd8-41d9-a334-0df5c5933b23',
              roleId: 'dbd83f2e-ec21-403e-9412-ad7aded32876',
            },
          ]
    LinkEntities:
      allOf:
        - type: object
          required:
            - action
          properties:
            action:
              type: string
              enum: [usersToOrganization, classesToSchool, programsToSchool] # and so on
          example:
            action: usersToOrganization
        - $ref: '#/components/schemas/LinkUsersToOrganization'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 404
        message: Not Found
    ValidationErrors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      required:
        - msg
        - value # joi's context.value
        - param # joi's context.key
        - entity # organization, school, class etc.
        - uuid # external uuid of the entity
      properties:
        msg:
          type: string
        value:
          type: string
        param:
          type: string
        entity:
          type: string
        uuid:
          type: string

    RetriableErrors:
      type: array
      items:
        $ref: '#/components/schemas/RetriableError'
    RetriableError:
      type: object
      required:
        - msg
        - type # error type: client_error, redis_error, backend_error etc.
        - endpoint # organization, school, class etc.
        - params # external uuid of the entity
      properties:
        msg:
          type: string
        type:
          type: string
          enum: [client_error, redis_error, backend_error]
        endpoint:
          type: string
        params:
          type: object

    Response:
      type: object
      required:
        - retriable
        - failed
      properties:
        retriable:
          type: array
          items:
            $ref: '#/components/schemas/RetriableErrors'
        failed:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []
