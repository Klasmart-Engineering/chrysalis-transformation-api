generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Check with Enrique about deleted_at, status

model School {
  // C1 API
  clientUuid String @id @map("client_uuid") @db.Uuid
  name       String @db.VarChar(255)

  clientOrgUuid String       @map("client_org_uuid") @db.Uuid
  organization  Organization @relation(fields: [clientOrgUuid], references: [clientUuid])

  shortCode String? @map("short_code") @db.VarChar(255)

  programUuids String[]  @map("program_uuids") @db.Uuid
  programs     Program[] @relation(fields: [programUuids, clientOrgUuid], references: [klUuid])

  classes Class[]
  users   User[]

  // User Service
  klUuid String? @unique @map("kl_uuid") @db.Uuid

  // Metadata
  status    String?   @map("status") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index(klUuid)
  @@map("schools")
}

// Can we drop the Program table, or do we actually need it?
model Program {
  // User Service
  klUuid String @id @map("kl_uuid") @db.Uuid

  // C1 API
  name String @db.VarChar(255)

  clientOrgUuid String?       @map("client_org_uuid") @db.Uuid
  organization  Organization? @relation(fields: [clientOrgUuid], references: [clientUuid])

  classes Class[]
  schools School[]

  // Metadata
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index([name, clientOrgUuid])
  @@map("programs")
}

// Can we drop the Program table, or do we actually need it?
model Role {
  // User Service
  klUuid String @id @map("kl_uuid") @db.Uuid

  // C1 API
  name String @db.VarChar(255)

  clientOrgUuid String?       @map("client_org_uuid") @db.Uuid
  organization  Organization? @relation(fields: [clientOrgUuid], references: [clientUuid])

  users User[]

  // Metadata
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([name, clientOrgUuid])
  @@map("roles")
}

model Class {
  // C1 API
  clientUuid String  @id @map("client_uuid") @db.Uuid
  name       String  @db.VarChar(255)
  shortCode  String? @map("short_code") @db.VarChar(255)

  clientOrgUuid String       @map("client_org_uuid") @db.Uuid
  organization  Organization @relation(fields: [clientOrgUuid], references: [clientUuid])

  clientSchoolUuid String @map("client_school_uuid") @db.Uuid
  school           School @relation(fields: [clientSchoolUuid], references: [clientUuid])

  programUuids String[]  @map("program_uuids") @db.Uuid
  programs     Program[] @relation(fields: [programUuids, clientOrgUuid], references: [klUuid])

  users User[]

  // User Service
  klUuid String? @unique @map("kl_uuid") @db.Uuid

  // Metadata
  status    String?   @map("status") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index(klUuid)
  @@map("classes")
}

model User {
  // C1 API
  clientUuid String @id @map("client_uuid") @db.Uuid

  givenName  String @map("given_name") @db.VarChar(255)
  familyName String @map("family_name") @db.VarChar(255)

  email       String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  dateOfBirth String? @map("date_of_birth") @db.VarChar(255)
  gender      String? @db.VarChar(255)

  clientOrgUuid String       @map("client_org_uuid") @db.Uuid
  organization  Organization @relation(fields: [clientOrgUuid], references: [clientUuid])

  clientSchoolUuid String @map("client_school_uuid") @db.Uuid
  school           School @relation(fields: [clientSchoolUuid], references: [clientUuid])

  classUuids String[] @map("class_uuids") @db.Uuid
  classes    Class[]  @relation(fields: [classUuids], references: [clientUuid])

  roleUuids String[] @map("role_uuids") @db.Uuid
  roles     Role[]   @relation(fields: [roleUuids], references: [klUuid])

  // User Service
  klUuid String? @unique @map("kl_uuid") @db.Uuid

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@index(klUuid)
  @@map("users")
}

model Organization {
  // C1 API
  clientUuid String  @id @map("client_uuid") @db.Uuid
  name       String  @db.VarChar(255)
  klUuid     String @unique @map("kl_uuid") @db.Uuid

  klShortCode String? @map("kl_short_code") @db.VarChar(255)

  schools  School[]
  classes  Class[]
  programs Program[]
  users    User[]
  roles    Role[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@index(klUuid)
  @@map("organizations")
}
