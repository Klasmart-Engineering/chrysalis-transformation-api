import fs from 'fs';
import path from 'path';
import spies from 'chai-spies';
import chaiAsPromised from 'chai-as-promised';
import supertest from 'supertest';
import chai, { expect, use } from 'chai';
import dotenv from 'dotenv';
import app from '../../src/app';
import { BackendService } from '../../src/services/backendService';
import nock from 'nock';
import { C1Service } from '../../src/services/c1Service';
import { C1Endpoints } from '../../src/config/c1Endpoints';
import { getClasses, getOrganizations, getSchools, getUsers } from '../utils/responses/c1';
import { log } from '../../src/utils/logging';
import { createFakeClient } from '../utils/createFakeClient';

use(chaiAsPromised);
use(spies);
// Override environment variables
const envConfig = dotenv.parse(
  fs.readFileSync(path.resolve(__dirname, '../../.env.test'))
);
for (const k in envConfig) {
  process.env[k] = envConfig[k];
}

let service: C1Service;
const hostname = 'testapi.ezmis.in';

const headers = {
  Authorization: 'Bearer ',
  'Content-Type': 'application/json',
};
const requestWithSupertest = supertest(app);
const backendService = BackendService.getInstance();

describe('POST /onboard', () => {
  it('returns 401 error if X_API_SECRET is empty', async () => {
    const res = await requestWithSupertest
      .post('/onboard')
      .send({ organizationName: 'organization', schoolName: 'school' });

    expect(res.status).to.eq(401);
  });

  it('returns 401 error if X_API_SECRET is invalid', async () => {
    const res = await requestWithSupertest
      .post('/onboard')
      .set('X_API_SECRET', 'invalid')
      .send({ organizationName: 'organization', schoolName: 'school' });

    expect(res.status).to.eq(401);
  });
});
